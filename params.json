{"name":"hAzzle Javascript Library","tagline":"Javascript library","body":"hAzzle Javascript Library\r\n=========================\r\n\r\n[![Build Status](https://travis-ci.org/hazzlejs/hAzzleJS.svg?branch=master)](https://travis-ci.org/hazzlejs/hAzzleJS) [![Code Climate](https://codeclimate.com/github/hazzlejs/hAzzleJS.png)](https://codeclimate.com/github/hazzlejs/hAzzleJS) [![Coverage Status](https://coveralls.io/repos/mehranhatami/hAzzleJS/badge.png?branch=master)](https://coveralls.io/r/mehranhatami/hAzzleJS?branch=master)\r\n\r\n**hAzzle** is a modular javascript library licensed under the terms of the MIT License written from the ground-up with modern browsers in mind. It is an attempt to bring together the best from all familiar libraries such as **jQuery**, **Underscore**, **Loadash**, and **Zepto**, borrowing from both browser and node.js code patterns.\r\n\r\nIt's biggest design goal is to be as minimal as possible, and give the controll back to you in form of modules, and this is the main reason why **hAzzle** is built as a collection of modules. \r\n\r\nThe Core contains only the basic code needed for the modules to work. On top of the Core is the module layer. You can use it whole, or just import specific modules you need. The API should be familiar to everyone who has worked with some of the libraries mentioned above.\r\n\r\nOne important thing to note is that **hAzzle** doesn't try to subclass Array in any way. A **hAzzle instance** is just a standard object, with the current elements selection stored in the **.elements array**. This gives you option to use all **ES5** / **ES6** functions methods, or deal with the **.elements array** with the same methods you find in libraries such as **Underscore** and **Loadash**.\r\n\r\nThis alone gives you over 100 different ways to deal with the **.elements array**, and you are not restricted to a few methods as you find in **jQuery** / **Zepto**. \r\n\r\nThe **util.js module** ( part of the Core) uses some of this native functions. And a couple of other functions such as **odd()** and **even()**.\r\n\r\n**hAzzle** also provide some of the same **DOM traversing methods** you might know from **jQuery** / **Zepto** like **.siblings()**, **.has()**, **.children()**, etc. in the **traversing.js module**.\r\n\r\nYou will also find similar methods like **.eq()**, **.prev()**, **.nextAll()*, **.next()** e.g. in the **collection.js module** ( part of the Core) to traverse through the **.elements array**\r\n\r\nOther methodds such as **.addClass()**, **.prepend()**, **.text()**, **.html()** e.g. are all included in the **module folder**.\r\n\r\njQuery / Zepto\r\n---------------\r\n**hAzzle** are **not** compatible with **jQuery** / **Zepto**, but if you use only this modules:\r\n\r\n* hazzle.js\r\n* support.js\r\n* core.js\r\n* jiesa.js\r\n \r\nand use this command on the set of elements:\r\n\r\n**.toJqueryZepto()**\r\n\r\nthe **.elements array** will be converted to **jQuery / Zepto style** and you can develop your own functions in the same way as you do for this libraries.\r\n\r\n**Note! hazzle will work as before, so you can actually use both hAzzle and jQuery / Zepto methods together**\r\n\r\njQuery similarities\r\n---------------------\r\n\r\nAs most of the developers are accustomed to using jQuery, hAzzle supports some of the same features, although the API is different. This function names are identical:\r\n\r\n* attr () \r\n* prop () \r\n* val () \r\n* css () \r\n\r\n**and**\r\n\r\n* valHooks () \r\n* propHooks () \r\n* attrHooks () \r\n* cssHooks ()\r\n\r\n**Note!** The css methods in hAzzle are little different then **jQuery**, only the method names are the same.\r\n\r\nAn example on the differences.\r\n\r\nIn **hAzzle** you can do:\r\n\r\n```javascript\r\n// Include the needed module\r\nvar css = hAzzle.require('css')\r\n// Get the result\r\nconsole.log(css.css($('#console'), 'width') )\r\n\r\nResult: 1030px\r\n\r\n```\r\nWidth **jQuery**:\r\n\r\n```javascript\r\n\r\n// Get the result\r\nconsole.log(jQuery.css($('#console'), 'width') )\r\n\r\nResult:\r\n\r\nTypeError: invalid 'in' operand style\r\nif ( name in style ) {\r\n```\r\nMeaning **jQuery** throws an error in this case. To archive the same in **jQuery** you have to do this:\r\n\r\n```javascript\r\n\r\n// Get the result\r\nconsole.log(jQuery.css($('#console').get(0), 'width') )\r\n\r\n```\r\nor\r\n\r\n```javascript\r\n\r\n// Get the result\r\nconsole.log(jQuery.css($('#console')[0], 'width') )\r\n\r\n```\r\n\r\nNative javascript\r\n-----------------\r\nEach Core module has it's own stand-alone methods that let you use the methods you need with native Javascript. So you are not bound to use the build-in selector engine.\r\n\r\nCouple of examples wihtout a selector engine:\r\n\r\n```javascript\r\n// Include the needed module\r\nvar css = hAzzle.require('css')\r\n// Get the result \r\nconsole.log(css.css( document.getElementById('test'), 'width') )\r\n\r\n```\r\nYou can also use **nodeList**\r\n\r\n```javascript\r\n// Include the needed module\r\nvar css = hAzzle.require('css')\r\n// Get the result \r\nconsole.log(css.css( document.getElementsByTagName('div'), 'width') )\r\n```\r\n\r\nAdding a class (This example will set the same className on each div element):\r\n\r\n```javascript\r\n// Include the needed module\r\nvar cls = hAzzle.require('classes')\r\n// Set the class names\r\ncls.addClass( document.getElementsByTagName('div'), 'hello!') \r\n```\r\nScalable Vector Graphics (SVG)\r\n--------------------\r\n**SVG** are supported by **hAzzle**, but only a few methods for detection and getting SVG attributes in the Core.\r\n\r\n```javascript\r\n// Detect if SVG element\r\nvar types = hAzzle.require('types')\r\nconsole.log(types.isSVGElem( ELEM ))\r\n```\r\n\r\n```javascript\r\n// Get SVG attributes\r\nvar setters = hAzzle.require('setters')\r\n\r\nconsole.log(setters.SVGAttr( PROPERTY ))\r\n```\r\nFor extended **SVG** support you will need to add the **svg.js** module from the module folder.\r\n\r\n**Note!** Many of the functions in this module are extending the Core methods, so you need to compile the Core with this modules to get **SVG** to work:\r\n\r\n* setters.js\r\n* classes.js\r\n\r\nand\r\n\r\n* style.js ( module folder) \r\n\r\nUnits and dimensions\r\n--------------------\r\n\r\nIn many other libraries such as **jQuery** there are issues and glitches when it comes to returning correct values on different dimensions methods such as  **height()**, **offset()**, **position()** and **offsetParent()**.\r\nOne of hAzzle design goals is to return the the correct values on this methods, and supports all known units ( e.g. **px**,  **pc**, **mm**, **%**, **cm**)\r\n\r\nBuild in the Core are the units conversation, and you can convert units like this:\r\n\r\n```javascript\r\n// Include the needed module\r\nvar css = hAzzle.require('css')\r\n\r\ncss.toPx(element, '2vh');\r\n```\r\nOr convert from **em** to **px**\r\n\r\n```javascript\r\n// Include the needed module\r\nvar css = hAzzle.require('css')\r\n// convert from em to px\r\ncss.toPx(element, '2em');\r\n```\r\n\r\nFor the other methods - e.g.  **height()** and **offset()** you need to include the **dimensjons.js** module.\r\n\r\nYour modules\r\n--------------\r\n\r\nYou can develop your own modules for **hAzzle**. If you do so, upload them to the **public folder** with a sub-directory that has the same name as your plugin.\r\n\r\n**Important!!** Don't forget to add a **dependency list** document in the root of your directory so other developers know what **hAzzle modules** to include together with the **Core** to get your module to work.\r\n\r\nDOM Level 4 (DL4)\r\n------------------\r\n\r\n **hAzzle** has a build in polify in the Core supporting the most common features. And also fixes a couple of cross-browser issues (e.g. IE9 and IE10's customEvent() are not usable as a constructor. The polify can't be removed, and needed for some of the modules (not part of the Core) to work. \r\n\r\n* prepend\r\n* append\r\n* before\r\n* after\r\n* replace\r\n* remove\r\n* matches\r\n* customEvent\r\n\r\nECMA 7\r\n-------\r\n\r\n**ECMA 7** are still experimental, and no browsers supports it except **Firefox v. 35**. This browser includes support for the 'contains' method of **ECMA 7**, and because the main goal with hAzzle are to create all browsers equal, **hAzzle** supports this in the **Core**. \r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/contains\r\n\r\nExample of usage:\r\n\r\n```javascript\r\n[1, 2, 3].contains(2);     // true\r\n[1, 2, 3].contains(4);     // false\r\n[1, 2, 3].contains(3, 3);  // false\r\n[1, 2, 3].contains(3, -1); // true\r\n[1, 2, NaN].contains(NaN); // true\r\n```\r\n**hAzzle** also supports other **ECMA 7** specs through the **ecma7.js** module in the **/modules folder**. \r\n\r\n  * entries\r\n * escape\r\n * compare\r\n * getPropertyNames\r\n * getOwnPropertyDescriptors\r\n * getPropertyDescriptor\r\n\r\nThe **ecma7.js** module only contains functions that most likely will not change in the future. \r\n\r\nWhich browsers who support **ECMA7** features, take a look here: http://kangax.github.io/compat-table/es7/\r\n\r\nWhy is the Core so big?\r\n---------------------\r\nThe hAzzle Core are not so big comparing to other libraries, and contains a lot more then the Javascript library. It take care of cross-browser issues, browsers bugs, setting the right document (**HTML** / **XML**), feature detection and more.\r\n\r\nOne example are the **customEvent**. This method are not usable as a constructor in **IE9** / **IE10**. With **hAzzle Core** this is fixed! Ref: https://developer.mozilla.org/en/docs/Web/API/CustomEvent\r\n\r\nAnother quick example on the benefits using the **hAzzle Core** comparing to **jQuery library**.\r\n\r\nLet's say you want to append() some content. With hAzzle and **DL4**, you do it like this:\r\n\r\n```javascript\r\n<div id=\"d\">Hello! </div>\r\ndocument.getElementById('d').append('new content');\r\n```\r\n\r\n**2 lines of code**, and pure, native Javascript is all it takes to append content.\r\n\r\nComparing to **jQuery**, to archive the same you have to add over **60 lines of code**:\r\n\r\nhttps://github.com/jquery/jquery/blob/master/src/manipulation.js#L194\r\n\r\nand you are stricted to use **jQuery** for this methods.\r\n\r\nHow to use\r\n-------------\r\nYou can use all functions internally in the same way as you do in **jQuery** / **Zepto**. \r\n\r\n```javascript\r\nhAzzle('#id').eq(1).append('new content');\r\n```\r\nor a each example:\r\n\r\n```javascript\r\nthis.each(function(elem) {\r\n});\r\n```\r\n**NOTE!** From v. 1.01a the **this** keyword in the **each()** and **map()** methods are no longer pointing to the window object, but to the element itself. They are now working the same way as you are used to from **jQuery** / **Zepto** / **Mootools** and **Prototype**.\r\n\r\nYou can still bind the elements to the Window Object as before.\r\n\r\n```javascript\r\nthis.each(function(elem) {\r\nthis['hello'] = function() { console.log('Hello!'); });\r\n}.bind(this));\r\n\r\nThen you can access it like this:\r\n\r\nhAzzle('p').hello();\r\n\r\nand it will show you 'Hello!' in the console log\r\n```\r\nFor the methods **find()**, **filter()**, **reduce()** , the  **this** keyword are still a reference to the Window object.\r\n\r\n**hAzzle** are more powerfull then this, and you can choose to include and use only the modules you want ( Core need to be loaded on the page first)\r\n\r\nIn the each() example above, we can also do it like this:\r\n\r\n```javascript\r\nvar _util = hAzzle.require('Util');\r\nvar obj = {a:'1', b:'2'};\r\n\r\n_util.each(obj, function(a, b) {}) \r\n```\r\n**Note!** Mostly all functions can be used this way. There are a few exceptions, and this is restricted for internal uage with the **. elements array**\r\n\r\n```javascript\r\n\r\n// Get the elements array\r\nvar _arr  = hAzzle('p')\r\n\r\nThe array can be used like this:\r\n\r\nconsole.log(_arr.elements)\r\n```\r\n\r\nNatives **ES5** / **ES6** on the **.elements array** are easy as well.\r\n\r\n```javascript\r\n\r\n// Get the elements array\r\nvar _arr  = hAzzle('p').elements\r\n\r\nand then some natives:\r\n\r\n_arr.reverse()\r\n_arr.sort()\r\n_arr.find()\r\n_arr.filter()\r\n\r\n```\r\nAdding / removing classes can be done same way:\r\n\r\n```javascript\r\n\r\nhAzzle('p').addClass('test')\r\nor\r\nvar _cls = hAzzle.require('Classes');\r\n\r\n// hAzzle \r\n_cls.addClass(hAzzle('p'), 'test')\r\n\r\n// native\r\n_cls.addClass(document.getElementById('example'), 'test')\r\n\r\n```\r\n**Note!** If you include all modules you have a complete library like **jQuery** / **Zepto**, and you have mostly the same methods with a **big** exception. Everything are done the native way with hAzzle, so nothing are compatible with the mentioned libraries. Meaning you can't copy a function from **hAzzle** and hope it works for **jQuery**, because it won't.\r\n\r\nHowever. You can make jQuery work on hAzzle.\r\n\r\n```javascript\r\n\r\n// Make jQuery / Zepto work\r\nvar _arr  = hAzzle('p').toJqueryZepto();\r\n\r\nthe created _arr would look like\r\n\r\n_arr[0] elem\r\n_arr[1] elem\r\n_arr[2] elem\r\n\r\n```\r\nNow you can use **jQuery / Zepto** methods as you are used too. But you can also use **hAzzle** methods together\r\nwith this functions.\r\n\r\n**UnderscoreJS** and **Loadash** can be used as well. \r\n\r\n```javascript\r\n\r\n// Get the elements array\r\nvar _arr  = hAzzle('p').elements;\r\n\r\n// Include the library you want, and then use the methods like this:\r\n\r\n_arr {method}\r\n\r\nand you are dealing with the array.\r\n```\r\nIt's also easy to create your own methods. No examples given, but with the **. elements array** as illustrated below you can use all native methods or **UnderscoreJS** // **Loadash** and create your own methods with the array.\r\n\r\nJiesa\r\n-----\r\n\r\n**hAzzle** have a build in selector engine - **jiesa**. **Jiesa** are using the native **querySelectorAll (QSA)** if no other selector engines are installed. \r\n\r\nThe main selector engine for **hAzzle** are a stand-alone module - **selector.js** - and can be replaced with your own selector engine.\r\n\r\nTo get your engine to work with **hAzzle**, you need to include this piece of code: \r\n\r\n```javascript\r\n\r\nhAzzle.define('selector', function() {\r\n\r\n return { find: { YOUR NAME HERE }  };\r\n\r\n});\r\n\r\n```\r\n**find { YOUR NAME HERE };** are important because **Jiesa** will check if the **selector.js** are installed and use that selector engine over **QSA** if installed.\r\n\r\n**hAzzle** also have a quick way to detect browsers features / bugs, if you choose to develop your own selector engine. \r\n\r\nExample:\r\n\r\n```javascript\r\n\r\n// Use addFeature() to add a feature / bug check\r\n\r\n_core.addFeature('supportAttributes', !div.getAttribute('className'));\r\n\r\n// Output the result\r\n\r\nconsole.log(_core.environment.supportAttributes); // boolean true / false\r\n\r\n```\r\nYou can get unique ID for current document like this:\r\n\r\n```javascript\r\n\r\nconsole.log(_core.environment.id);\r\n\r\n```\r\n\r\nAnd if you want to check if current document is HTML or XML, you do:\r\n\r\n```javascript\r\n\r\n// HTML doc\r\nconsole.log(_core.isHTML);\r\n\r\n// XML doc\r\nconsole.log(_core.isXML);\r\n\r\n```\r\n**Note!** hAzzle's selector engine has a few similarites with other selector engines regarding the **core.js** module. It can't be avoid, for if you\r\nlook at **Prototype**, **Slick** or even **Sizzle** they are almost the same when it comes to sorting DOM nodes e.g.\r\nBased on this **hAzzle** supports similarities with Sizzle when it comes to **QSA** and **matchesSelector** bug tests. \r\n\r\n**Sizzle**\r\n \r\n* rbuggyQSA     \r\n*  rbuggyMatches \r\n\r\n**hAzzle**\r\n \r\n* QSABugs\r\n* matchesBugs\r\n\r\nCore\r\n---------------------\r\n\r\n<table>\r\n<thead><tr>\r\n  <th>module</th>  <th>description</th>\r\n</tr></thead>\r\n<tbody>\r\n   <tr>\r\n    <th><a href=\"core/hazzle.js#files\">hazzle</a></th>\r\n        <td>Main functions such as the module system</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/has.js#files\">has</a></th>\r\n        <td>Feature and browser detection methods. All browsers are detected with feature detection and not UserAgent (ua) for better security</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/core.js#files\">core</a></th>\r\n        <td>Core functions for the library. Dealing with correct documents - XML and HTML e.g.</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/types.js#files\">types</a></th>\r\n        <td>Provides a collection of <code>'is-methods'</code> e.g. <code>isString</code> and <code>isObject</code></td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/util.js#files\">util</a></th>\r\n        <td>Ultility belt functions faithfull to native Javascript and browser features</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/bind.js#files\">bind</a></th>\r\n        <td>Provides a optimized cross-browser Function.prototype.bind(), and a internal native prototype bind()alternative</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/text.js#files\">text</a></th>\r\n        <td></td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/collection.js#files\">collection</a></th>\r\n     <td>\r\n      Internal function for dealing with the <code>.elements array</code></td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/jiesa.js#files\">jiesa</a></th>\r\n     <td>\r\n      <code>Jiesa</code> basic selector. Also includes <code>find()</code>, <code>filter()</code> methods. <code>DOM Level 4 - matches()</code> are used for some of this methods.\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/strings.js#files\">strings</a></th>\r\n    <td><code>Provides methods for dealing with string such as <code>trim()</code> and <code>camelize()</code> </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/storage.js#files\">storage</a></th>\r\n    <td>\r\n      Data / element storage methods. Store private and public data on object or <code>HTML5</code>.\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/curcss.js#files\">curcss</a></th>\r\n     <td>\r\n      Provides basic getter / setter function for <code>CSS styles</code>, and return correct native values in the <code>px</code> unit\r\n    </td>\r\n  </tr>\r\n <tr>\r\n    <th><a href=\"core/setters.js#files\">setters</a></th>\r\n     <td> Provide methods for setting / getting <code>attributes</code>, <code>properties</code> and <code>values</code></td>\r\n  </tr>\r\n <tr>\r\n    <th><a href=\"core/attrhooks.js#files\">attrhooks</a></th>\r\n     <td>\r\n      Provides basic getter / setter function for the <code>attr()</code> method <code>setters.js</code> module.\r\n    </td>\r\n  </tr>\r\n <tr>\r\n    <th><a href=\"core/prophooks.js#files\">prophooks</a></th>\r\n     <td>\r\n      Provides basic getter / setter function for the <code>prop()</code> method <code>setters.js</code> module.\r\n    </td>\r\n  </tr>\r\n \r\n <tr>\r\n    <th><a href=\"core/valhooks.js#files\">valhooks</a></th>\r\n     <td>\r\n      Provides basic getter / setter function for the <code>val()</code> method <code>setters.js</code> module.\r\n    </td>\r\n  </tr>\r\n     <th><a href=\"core/doml4.js#files\">doml4</a></th>\r\n     <td>\r\n      DOM Level 4 pollify. See the <code>DOM Level 4 section</code>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"core/contains.js#files\">contains</a></th>\r\n     <td>\r\n      ECMA 7 pollify function for contains() methods for browsers who don't support it. See the <code>ECMA 7 section</code>\r\n    </td>\r\n  </tr>\r\n</tbody>\r\n</table>\r\n\r\nModules\r\n-------\r\n\r\n<table>\r\n<thead><tr>\r\n  <th>module</th>  <th>description</th>\r\n</tr></thead>\r\n<tbody>\r\n   <tr>\r\n    <th><a href=\"modules/attributes.js#files\">attributes</a></th>\r\n        <td><code>HTML5</code> attribute functions</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/style.js#files\">style</a></th>\r\n        <td>Setter and getter for CSS styles</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/csshook.js#files\">csshooks</a></th>\r\n        <td>cssHooks for the style.js module</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/dimensions.js#files\">dimensions</a></th>\r\n        <td>Provides various features for deling with width, and height, viewport, positions e.g.</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/xhr.js#files\">xhr</a></th>\r\n        <td>XHR v. 2 with native promises support</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/ready.js#files\">ready</a></th>\r\n        <td>Document ready method</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/classes.js#files\">classes</a></th>\r\n     <td>\r\n      <code>Add</code>, <code>remove</code> and <code>toggle</code> classes. Uses <code>classList</code> if browser supports it</td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/traversing.js#files\">traversing</a></th>\r\n     <td>\r\n      Most common DOM traversion methods such as <code>up()</code>, <code>down()</code>, <code>next()<code>, <code>prev()</code> and similar methods know from jQuery / Zepto\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/visibility.js#files\">visibility</a></th>\r\n    <td>\r\n       <code>Add</code>, <code>remove</code> and <code>toggle</code> DOM elements     \r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/jsonxml.js#files\">jsonxml</a></th>\r\n    <td>\r\n      <code>JSON</code> and <code>XML</code> support / parsing\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/manipulation.js#files\">manipulation</a></th>\r\n     <td>\r\n      Provides <code>append</code>, <code>prepend</code>, <code>text</code> and other familiar methods known from from jQuery / Zepto. <code>DOM Level 4</code> are used for some of this methods, and <code>insertAdjutantHTML</code>.\r\n    </td>\r\n  </tr>\r\n <tr>\r\n    <th><a href=\"modules/ecma7.js#files\">ecma7</a></th>\r\n     <td>\r\n      Provides a few <code>ECMA 7 (ecma262)</code> methids. This is experimentell and not supported by browsers!\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <th><a href=\"modules/touch.js#files\">ecma7</a></th>\r\n     <td>\r\n      Provides touch feature detection on various platforms\r\n    </td>\r\n  </tr>\r\n</tbody>\r\n</table>\r\n\r\nBrowser compatiblity\r\n--------------------\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<th id=\"browser\" style=\"text-align:left;\"> Browser </th>\r\n<th id=\"version\" style=\"text-align:left;\"> Version </th>\r\n</tr>\r\n</thead>\r\n\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align:left;\"> Chrome  </td>\r\n<td style=\"text-align:left;\">20+       </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Safari  </td>\r\n<td style=\"text-align:left;\">6       </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Firefox </td>\r\n<td style=\"text-align:left;\">22+       </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> IE      </td>\r\n<td style=\"text-align:left;\">9+       </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Opera   </td>\r\n<td style=\"text-align:left;\">15+    </td>\r\n</tr>\r\n\r\n</tbody>\r\n</table>\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<th id=\"browser\" style=\"text-align:left;\"> Browser           </th>\r\n<th id=\"version\" style=\"text-align:left;\"> Version      </th>\r\n</tr>\r\n</thead>\r\n\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align:left;\"> iOS               </td>\r\n<td style=\"text-align:left;\"> 6.0.1 </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Android           </td>\r\n<td style=\"text-align:left;\"> 4.0+         </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Blackberry        </td>\r\n<td style=\"text-align:left;\"> 9.0+          </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Opera Mobile      </td>\r\n<td style=\"text-align:left;\"> 13.1+  </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Chrome (Android)  </td>\r\n<td style=\"text-align:left;\"> 22+      </td>\r\n</tr>\r\n\r\n<tr>\r\n<td style=\"text-align:left;\"> Firefox (Android) </td>\r\n<td style=\"text-align:left;\"> 24+      </td>\r\n</tr>\r\n\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}